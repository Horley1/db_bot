import os
import psycopg2
from flask import Flask, request
from config import *
import telebot
from telebot import types
from random import randint
from requests import post, get
from json import loads, dumps
from datetime import datetime
from fernet import *
import json
from keyboards import *
from flask import jsonify
from telebot import types
from math import ceil


bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)
conn = psycopg2.connect(dbname=db_name, user=db_user, password=db_pass, host=db_host)
cursor = conn.cursor()
conn.autocommit = True


@bot.message_handler(commands=['start'])
def start_message(message):
    # –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
    # –¢–µ–±–µ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: –Ω–∞–ø–∏—à–∏ /reg
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!', reply_markup=keyboard3)
    bot.send_message(message.chat.id, '–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å —Ç–≤–æ–∏–º –≠–ª–∂—É—Ä–æ–º.', reply_markup=keyboard4)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏: /start", reply_markup=keyboard3)


@bot.message_handler(commands=['reg'])
def reg(message):
    if not check_bd(message):
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")
        bot.register_next_step_handler(message, get_login)
    else:
        bot.send_message(message.chat.id, "–≠–π–π–π, —Ç—ã —É–∂–µ –≤ –±–∞–∑–µ! –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—è–≤–∏—Ç—å—Å—è, —è —Ç–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–ø–æ–≤–µ—â—É.")


def check_bd(message):
    cursor.execute(f"SELECT * FROM data WHERE user_id={message.chat.id}")
    if cursor.fetchone():
        return True
    else:
        return False


def get_login(message):
    global login
    login = message.text
    bot.send_message(message.from_user.id, '–û–ö. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å. ')
    bot.send_message(message.from_user.id,
                     '–ü–∞—Ä–æ–ª—å —à–∏—Ñ—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π Python, –ø–æ—ç—Ç–æ–º—É –Ω–∏–∫—Ç–æ –∫—Ä–æ–º–µ –Ω–µ–≥–æ –ø–∞—Ä–æ–ª—å –Ω–µ —É–∑–Ω–∞–µ—Ç!')
    bot.delete_message(message.chat.id, message.message_id)
    bot.register_next_step_handler(message, get_pass)


def get_pass(message):
    global password
    password = message.text
    bot.send_message(message.from_user.id, '–©–∞, –Ω–µ —Ä—ã–ø–∞–π—Å—è. –û—Ç–ø—Ä–∞–≤–ª—é –∑–∞–ø—Ä–æ—Å–∏–∫ –∏ –∑–∞–∫–∏–Ω–µ–º —Ç–µ–±—è –≤ –±–∞–∑—É.')
    bot.delete_message(message.chat.id, message.message_id)
    reg_to_bd(message)


def get_elgur(login, password, message):
    r = post('https://api.eljur.ru/api/auth', data={
        'login': login,
        'password': password,
        'vendor': '2007',
        'devkey': '9235e26e80ac2c509c48fe62db23642c',  # 19c4bfc2705023fe080ce94ace26aec9
        'out_format': 'json'
    })
    if r.status_code != 200:
        return None
    token = loads(r.text)['response']['result']['token']
    r2 = get('https://api.eljur.ru/api/getmarks', params={
        'auth_token': token,
        'vendor': '2007',
        'out_format': 'json',
        'devkey': '9235e26e80ac2c509c48fe62db23642c',
        'days': start_period + '-' + end_period
    })
    student_code = list(r2.json()['response']['result']['students'].keys())[0]
    lst_marks = r2.json()['response']['result']['students'][student_code]['lessons']
    return (token, lst_marks)


def encode(data):
    file = open('key.txt', 'rb')
    cipher_key = file.readline()
    cipher = Fernet(cipher_key)
    encrypted_text = cipher.encrypt(data)
    string = bytes.decode(encrypted_text, encoding='utf-8')
    return string


def reg_to_bd(message):
    if get_elgur(login, password, message) == None:
        bot.send_message(message.from_user.id, '–ö—Ö–º–º... –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π! –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.')
        reg(message)
        return
    token, lst_marks = get_elgur(login, password, message)
    values = [message.chat.id, str("'") + encode(login) + str("'"), str("'") + encode(password) + str("'"),
              str("'") + token + str("'"), str("'") + dumps(lst_marks) + str("'"), datetime.now().date().day,
              datetime.now().date().month, datetime.now().date().year]
    cursor.execute(
        f"INSERT INTO data(user_id, login, pass, token, last_marks, day, month, year) VALUES({values[0]}, {values[1]}, {values[2]}, {values[3]}, {values[4]}, {values[5]}, {values[6]}, {values[7]});")
    res = bot.send_message(message.from_user.id, '–ê–≥–∞, –≤ –±–∞–∑—É —Ç–µ–±—è –¥–æ–±–∞–≤–∏–ª... –ê —Ç–µ–ø–µ—Ä—å –≤—Ä–µ–º—è –ø–æ–ª—É—á–∞—Ç—å –æ—Ü–µ–Ω–∫–∏, —Å–∞–ª–∞–≥–∞!')
    bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAEDz7hh_nZwsCfI-0F0RDJAccjHRFO2IgACYgADmS9LCloe14FkpNDVIwQ',
                     res.id)
    bot.send_message(327830972, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!üí™üèª\n–ò–º—è: {message.from_user.first_name} {message.from_user.last_name}\n–ê–∫–∫–∞—É–Ω—Ç: @{message.from_user.username}, {message.from_user.id}')


def get_debt(message):
    bot.send_message(message.chat.id, "–û–ö –±—Ä–æ, —Ç–µ–ø–µ—Ä—å –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–∞–∫!", keyboard3)


@bot.message_handler(commands=['menu'])
def menu(message):
    bot.send_message(message.chat.id, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Äüåê–ú–µ–Ω—é-–ø–∞–Ω–µ–ª—åüåê‚†Ä‚†Ä‚†Ä‚†Ä", reply_markup=keyboard5)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def txt(message):
    if message.text == "‚öô–ú–µ–Ω—é‚öô":
        menu(message)
    else:
        res = bot.send_message(message.chat.id, phrases[randint(0, len(phrases) - 1)])
        bot.send_sticker(message.chat.id, ids[randint(0, len(ids) - 1)], res.id)


@bot.callback_query_handler(func=lambda c: c.data == 'button1')
def process_callback_button1(callback_query):
    try:
        print(callback_query)
        bot.answer_callback_query(callback_query.id)
        res = bot.send_message(callback_query.from_user.id, '–û–∫–µ–π!')
        bot.send_sticker(callback_query.from_user.id, agree[randint(0, len(agree) - 1)], res.id)
        cursor.execute(f"SELECT * FROM data WHERE user_id={callback_query.from_user.id}")
        db_request = cursor.fetchone()
        prev_debt = json.loads(db_request[8])
        prev_buf = json.loads(db_request[9])
        buf = prev_buf[str(callback_query.message.message_id)]
        prev_debt.append(buf)
        prev_buf.pop(str(callback_query.message.message_id))
        values = [callback_query.from_user.id, str("'") + json.dumps(prev_debt) + str("'"),
                  str("'") + json.dumps(prev_buf) + str("'")]
        cursor.execute(f"UPDATE data SET debt = {values[1]}, buffer = {values[2]} WHERE user_id = {values[0]}")
    except Exception as e:
        print("error")
        print(e)


@bot.callback_query_handler(func=lambda c: c.data == 'button2')
def process_callback_button2(callback_query):
    try:
        bot.answer_callback_query(callback_query.id)
        bot.send_message(callback_query.from_user.id, '–ö—Ä–∞—Å–∞–≤–∞, –æ–¥–Ω–æ–π –¥–≤–æ–π–∫–æ–π –º–µ–Ω—å—à–µ!')
        cursor.execute(f"SELECT * FROM data WHERE user_id={callback_query.from_user.id}")
        db_request = cursor.fetchone()
        debt = json.loads(db_request[8])
        for i in range(len(debt)):
            if debt[i]['message'] == str(callback_query.message.message_id):
                debt.pop(i)

        values = [callback_query.from_user.id, str("'") + json.dumps(debt) + str("'")]
        cursor.execute(f"UPDATE data SET debt = {values[1]} WHERE user_id = {values[0]}")
    except Exception as e:
        print("error")
        print(e)

@bot.callback_query_handler(func=lambda c: c.data == 'button4')
def process_callback_button4(callback_query):
    bot.answer_callback_query(callback_query.id)
    cursor.execute(f"SELECT * FROM data WHERE user_id={callback_query.from_user.id}")
    data = cursor.fetchone()
    if data == None:
        bot.send_message(callback_query.from_user.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏: /start")
        return
    debt_button = types.InlineKeyboardButton(str(data[10]), callback_data='debt')
    keyboard = types.InlineKeyboardMarkup(row_width=3).add(button13, debt_button, button14, button5)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'button5')
def process_callback_button5(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard5)


@bot.callback_query_handler(func=lambda c: c.data == 'debt')
def process_callback_button_debt(callback_query):
    bot.answer_callback_query(callback_query.id)


@bot.callback_query_handler(func=lambda c: c.data == 'button6')
def process_callback_button6(callback_query):
    bot.answer_callback_query(callback_query.id)
    cursor.execute(f"SELECT * FROM data WHERE user_id={callback_query.from_user.id}")
    data = cursor.fetchone()
    if data == None:
        bot.send_message(callback_query.from_user.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏: /start")
        return
    counter = 0
    average = 0
    for elem in json.loads(data[4]):
        if elem['average'] != '0':
            average += float(elem['average'])
            counter += 1
    bot.send_message(callback_query.from_user.id, f"–¢–≤–æ–π –≤—Å–µ–ø—Ä–µ–¥–º–µ—Ç–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ —ç—Ç—É —á–µ—Ç–≤–µ—Ä—Ç—å: {average / counter:.{2}f}üí™üèª")


@bot.callback_query_handler(func=lambda c: c.data == 'button7')
def process_callback_button7(callback_query):
    bot.answer_callback_query(callback_query.id)
    cursor.execute(f"SELECT * FROM data WHERE user_id={callback_query.from_user.id}")
    data = cursor.fetchone()
    if data == None:
        bot.send_message(callback_query.from_user.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏: /start")
        return
    if bool(data[12]):
        keyboard = types.InlineKeyboardMarkup(row_width=1).add(button19, button20, button5)
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=1).add(button18, button20, button5)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)



@bot.callback_query_handler(func=lambda c: c.data == 'button8')
def process_callback_button8(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—èüì°:")
    bot.register_next_step_handler(callback_query.message, suggestion)

def suggestion(message):
    bot.send_message(327830972, f'–ê–¥–º–∏–Ω, –ø—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç:\n–ò–º—è: {message.from_user.first_name} {message.from_user.last_name}\n–ê–∫–∫–∞—É–Ω—Ç: @{message.from_user.username}, {message.from_user.id}\n–¢–µ–∫—Å—Ç: {message.text}')
    bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–æ! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–º —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—å–±—É. –°–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ñ–¥–∏!')


@bot.callback_query_handler(func=lambda c: c.data == 'button9')
def process_callback_button9(callback_query):
    bot.answer_callback_query(callback_query.id)
    reg(callback_query.message)


@bot.callback_query_handler(func=lambda c: c.data == 'button10')
def process_callback_button10(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.from_user.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É–π—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚ïî üìï–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫üìï\n‚ïü 2Ô∏è‚É£–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–æ–ª–∂–Ω–æ—Å—Ç—è—Ö2Ô∏è‚É£\n‚ïü üìö–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–πüìö\n‚ïö üíØ–°—Ä–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–π –±–∞–ª–ªüíØ')


@bot.callback_query_handler(func=lambda c: c.data == 'button11')
def process_callback_button9(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.from_user.id, '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –í—Å–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ:')
    video = open("db-video2.mp4", 'rb')
    bot.send_video(callback_query.from_user.id, video)


@bot.callback_query_handler(func=lambda c: c.data == 'button12')
def process_callback_button9(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.from_user.id, '–° —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ:\n‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚òé@kalmykmaks‚òé')


@bot.callback_query_handler(func=lambda c: c.data == 'button13')
def process_callback_button13(callback_query):
    try:
        bot.answer_callback_query(callback_query.id)
        cursor.execute(f"SELECT * FROM data WHERE user_id={callback_query.from_user.id}")
        data = cursor.fetchone()
        if data[10] - 1 > 0:
            debt_button = types.InlineKeyboardButton(str(data[10] - 1), callback_data='debt')
            keyboard = types.InlineKeyboardMarkup(row_width=3).add(button13, debt_button, button14, button5)
            bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)
            cursor.execute(f"UPDATE data SET debt_time = {data[10] - 1} WHERE user_id = {callback_query.from_user.id}")
        else:
            bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞! –ü–µ—Ä–∏–æ–¥ –∑–∞–¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1. –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–∫–ª—é—á–∏—Ç—å'")
    except Exception as e:
        print(e)


@bot.callback_query_handler(func=lambda c: c.data == 'button14')
def process_callback_button14(callback_query):
    try:
        bot.answer_callback_query(callback_query.id)
        cursor.execute(f"SELECT * FROM data WHERE user_id={callback_query.from_user.id}")
        data = cursor.fetchone()
        if data[10] + 1 <= 31:
            debt_button = types.InlineKeyboardButton(str(data[10] + 1), callback_data='debt')
            keyboard = types.InlineKeyboardMarkup(row_width=3).add(button13, debt_button, button14, button5)
            bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)
            cursor.execute(f"UPDATE data SET debt_time = {data[10] + 1} WHERE user_id = {callback_query.from_user.id}")
        else:
            bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞! –ü–µ—Ä–∏–æ–¥ –∑–∞–¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 31.")
    except Exception as e:
        print(e)


@bot.callback_query_handler(func=lambda c: c.data == 'button16')
def process_callback_button16(callback_query):
    bot.answer_callback_query(callback_query.id, text="–¢—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!üò≥\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'‚úÖ", show_alert=True)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard6)


@bot.callback_query_handler(func=lambda c: c.data == 'button17')
def process_callback_button16(callback_query):
    bot.answer_callback_query(callback_query.id)
    cursor.execute(f"DELETE FROM data WHERE user_id={callback_query.from_user.id}")
    bot.send_message(callback_query.from_user.id, '–ü—Ä–æ—Ñ–∏–ª—å –±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω–æ —É–¥–∞–ª–µ–Ω!üò¢')
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard5)
    bot.send_message(327830972,f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª—Å—èü§ß\n–ò–º—è: {callback_query.from_user.first_name} {callback_query.from_user.last_name}\n–ê–∫–∫–∞—É–Ω—Ç: @{callback_query.from_user.username}, {callback_query.from_user.id}')


def get_homework(user_id):
    cursor.execute(f"SELECT * FROM data WHERE user_id={user_id}")
    token = cursor.fetchone()[3]
    r2 = get('https://api.eljur.ru/api/gethomework', params={
        'auth_token': token,
        'vendor': '2007',
        'out_format': 'json',
        'devkey': '9235e26e80ac2c509c48fe62db23642c',
        'days': start_period + '-' + end_period
    })
    data = r2.json()['response']['result']['students']
    return json.dumps(data[list(data.keys())[0]]['days'])


@bot.callback_query_handler(func=lambda c: c.data == 'button18')
def process_callback_button18(callback_query):
    bot.answer_callback_query(callback_query.id)
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(button19, button20, button5)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)
    cursor.execute(f"UPDATE data SET homeworks = true WHERE user_id = {callback_query.from_user.id}")
    cursor.execute(f"UPDATE data SET last_hw = '{get_homework(callback_query.from_user.id)}' WHERE user_id = {callback_query.from_user.id}")


@bot.callback_query_handler(func=lambda c: c.data == 'button19')
def process_callback_button19(callback_query):
    bot.answer_callback_query(callback_query.id)
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(button18, button20, button5)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)
    cursor.execute(f"UPDATE data SET homeworks = false WHERE user_id = {callback_query.from_user.id}")

@bot.callback_query_handler(func=lambda c: c.data == 'button21')
def process_callback_button7(callback_query):
    bot.answer_callback_query(callback_query.id)
    cursor.execute(f"SELECT * FROM data WHERE user_id={callback_query.from_user.id}")
    data = cursor.fetchone()
    if data == None:
        bot.send_message(callback_query.from_user.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏: /start")
        return
    if bool(data[11]):
        keyboard = types.InlineKeyboardMarkup(row_width=1).add(button23, button5)
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=1).add(button22, button5)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'button22')
def process_callback_button22(callback_query):
    bot.answer_callback_query(callback_query.id)
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(button23, button5)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)
    cursor.execute(f"UPDATE data SET marks = true WHERE user_id = {callback_query.from_user.id}")


@bot.callback_query_handler(func=lambda c: c.data == 'button23')
def process_callback_button23(callback_query):
    bot.answer_callback_query(callback_query.id)
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(button22, button5)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)
    cursor.execute(f"UPDATE data SET marks = false WHERE user_id = {callback_query.from_user.id}")


@bot.callback_query_handler(func=lambda c: c.data == 'button24')
def process_callback_button24(callback_query):
    bot.answer_callback_query(callback_query.id)
    cursor.execute(f"SELECT token FROM data WHERE user_id={callback_query.from_user.id}")
    data = cursor.fetchone()
    r2 = get('https://api.eljur.ru/api/getschedule', params={
        'auth_token': data,
        'vendor': '2007',
        'out_format': 'json',
        'devkey': '9235e26e80ac2c509c48fe62db23642c',
        'days': start_period + '-' + end_period
    })
    line = ''
    if datetime.now().strftime('%Y%m%d') not in r2.json()['response']['result']['days']:
        bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞!‚ùå –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!")
        bot.send_sticker(callback_query.from_user.id, "CAACAgIAAxkBAAEEXEtiSXcuWO5UIB39jx2wrYZDXralagACxAcAApb6EgW5zuHJF5MrlCME")
        return
    bot.send_message(callback_query.from_user.id, "–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
    data = r2.json()['response']['result']['days'][datetime.now().strftime('%Y%m%d')]['items']
    num = ceil((datetime.now().time().hour * 60 + datetime.now().time().minute - 539) / 60)
    for elem in enumerate(data):
        if elem[0] + 1 == num:
            line += f"{elem[0] + 1}. {elem[1]['name']} <b><u>({elem[0] + 9}:00-{elem[0] + 9}:45)</u></b><i><b> ‚è∞–¢–ï–ö–£–©–ò–ô‚è∞</b></i>\n"
        else:
            line += f"{elem[0] + 1}. {elem[1]['name']} <b><u>({elem[0] + 9}:00-{elem[0] + 9}:45)</u></b>\n"
    bot.send_message(callback_query.from_user.id, line, parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data == 'button25')
def process_callback_button25(callback_query):
    bot.answer_callback_query(callback_query.id)
    cursor.execute(f"SELECT * FROM data WHERE user_id={callback_query.from_user.id}")
    data = cursor.fetchone()
    if data == None:
        bot.send_message(callback_query.from_user.id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏: /start")
        return
    if bool(data[12]):
        keyboard = types.InlineKeyboardMarkup(row_width=1).add(button27, button5)
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=1).add(button26, button5)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == 'button26')
def process_callback_button26(callback_query):
    bot.answer_callback_query(callback_query.id)
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(button27, button5)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)
    cursor.execute(f"UPDATE data SET schedule = true WHERE user_id = {callback_query.from_user.id}")


@bot.callback_query_handler(func=lambda c: c.data == 'button27')
def process_callback_button27(callback_query):
    bot.answer_callback_query(callback_query.id)
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(button26, button5)
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=keyboard)
    cursor.execute(f"UPDATE data SET schedule = false WHERE user_id = {callback_query.from_user.id}")

@bot.callback_query_handler(func=lambda c: c.data == 'button28')
def process_callback_button28(callback_query):
    bot.answer_callback_query(callback_query.id)
    cursor.execute("SELECT user_id FROM data")
    bot.send_message(callback_query.from_user.id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(cursor.fetchall())}")


@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

@server.route('/')
def startPage():
    resp = jsonify(success=True)
    resp.status_code = 200
    return resp

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=URL)
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
